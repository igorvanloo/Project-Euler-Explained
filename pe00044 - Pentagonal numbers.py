#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 13 11:23:29 2020

@author: igorvanloo
"""

'''
Project Euler Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and 
D = |Pk − Pj| is minimised; what is the value of D?

We want Pk and Pj to be as close as possible to each other 

Anwser:
    5482660
--- 1.827820062637329 seconds ---
'''

import time, math, eulerlib, itertools
start_time = time.time()

def is_pentagonal(x):
    #Take the inverse function to test whether or not a number is pentagonal
    if (1+(24*x+1)**0.5) % 6 == 0:
        return True
    return False

def compute():
    i = 1
    while True:
        for j in range(1,i): # this ensures that a > b therefore a-b is minimised 
            a = int((i/2)*(3*i-1))
            b = int((j/2)*(3*j-1))
            if is_pentagonal(a+b) == True and is_pentagonal(abs(a-b)) == True: #Once we find given condition we are done
                print(i,j)
                return (abs(a-b))
                
        i += 1 #Keep increasing till solution is found
        

if __name__ == "__main__":
    print(compute())
    print("--- %s seconds ---" % (time.time() - start_time))